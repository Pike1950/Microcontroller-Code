###############################################################################
#                                                                             #
#     IAR Assembler V6.50.1.967/W32  for MSP430 27/Sep/2018  18:46:59         #
#     Copyright 1996-2016 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP1\WardBP1.s43#
#           List file     =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP1\Debug\List\WardBP1.lst#
#           Object file   =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP1\Debug\Obj\WardBP1.r43#
#           Command line  =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP1\WardBP1.s43 #
#                            -OC:\Users\PikesPlace\Documents\ECE 3362\WardBP1\Debug\Obj #
#                            -s+ -M<> -w+                                     #
#                            -LC:\Users\PikesPlace\Documents\ECE 3362\WardBP1\Debug\List #
#                            -t8 -x -r -D__MSP430G2553__                      #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 7.4\430\INC\ #
#                                                                             #
###############################################################################

      1    000200              ;-----------------------------------------------
                               --------------------------------
      2    000200              ;  ECE 3362-002 Project 1 - 7 segment display
                                program.
      3    000200              ;       This program will utilize an expansion
                                board that has a 7-segment
      4    000200              ;       display wired on it. After pressing the
                                LaunchPad button, the string 
      5    000200              ;       'ECE-3362' and one's digit from the
                                previous project will be displayed 
      6    000200              ;       in a sequence. After the sequence is
                                done running, a zero will be 
      7    000200              ;       displayed and the four push buttons will
                                be enabled. Pressing a 
      8    000200              ;       combination of the four buttons will
                                display the resulting hex value.
      9    000200              ;       
     10    000200              ;  Purpose: This program is designed to
                                introduce the student into the usage 
     11    000200              ;       of an expansion board, a 7-segment 1
                                digit board, pattern tables, and
     12    000200              ;       port masking.
     13    000200              ;
     14    000200              ;   Target: TI LaunchPad development board with
                                MSP430G2553 device installed
     15    000200              ;
     16    000200              ;       Date:           Sept 27, 2018
     17    000200              ;       Last Revision:  1.0
     18    000200              ;       Written by:     Bradley Ward, ECE dept,
                                Texas Tech University
     19    000200              ;       Adapted from:   Provided code examples;
                                Dr. M. Helm, September 2018   
     20    000200              ;                       DemoWith_1_digitExpansio
                               nBdRevised
     21    000200              ;                       DemoWith_1_digitExBDPB_M
                               askingAndTableExample
     22    000200              ;                       DemoSimpleTableStructure
                               Revised
     23    000200              ;       Assembler/IDE:  IAR Embedded Workbench
                                6.5
     24    000200              ;
     25    000200              ;       HW I/O assignments: (hardwired on
                                LaunchPad board)
     26    000200              ;       P1.0    (output) LED1 LaunchPad bd
                                (active high)
     27    000200              ;       P1.1    (input)  pushbutton (top)
                                (active low) expansion bd 
     28    000200              ;       P1.2    (input)  pushbutton (second from
                                top) (active low) expansion bd 
     29    000200              ;       P1.3    (input)  pushbutton on LaunchPad
                                bd (active low)
     30    000200              ;       P1.4    (input) pushbutton (third from
                                top) (active low) expansion bd
     31    000200              ;       P1.5    (input) pushbutton (bottom)
                                (active low) expansion bd 
     32    000200              ;       P1.6    (output) LED2 LaunchPad bd
                                (active high)  
     33    000200              ;       P1.7    (not used)  
     34    000200              ;
     35    000200              ;       P2.0    (output) Segment A (active high)
                                drives display board
     36    000200              ;       P2.1    (output) Segment B (active high)
                                drives display board
     37    000200              ;       P2.2    (output) Segment C (active high)
                                drives display board
     38    000200              ;       P2.3    (output) Segment D (active high)
                                drives display board
     39    000200              ;       P2.4    (output) Segment E (active high)
                                drives display board
     40    000200              ;       P2.5    (output) Segment F (active high)
                                drives display board
     41    000200              ;       P2.6    (output) Segment G (active high)
                                drives display board
     42    000200              ;       P2.7    (output) Segment DP (active
                                high) drives display board
     43    000200              ;
     44    000200              ;-----------------------------------------------
                               --------------------------------
     45    000200              #include  "msp430g2553.h"   ; standard header
                                required for program
     46    000200              ;-----------------------------------------------
                               --------------------------------
     47    000200              ; Constants
     48    000200              ;-----------------------------------------------
                               --------------------------------
     49    00FFFF              LONG_DELAY      EQU     65535  ; max 16 bit
                                value (FFFFh)
     50    002710              SHORT_DELAY     EQU     10000
     51    000200              
     52    000001              SEG_A           EQU     %00000001 ; Port pin
                                position P2.0
     53    000002              SEG_B           EQU     %00000010 ; Port pin
                                position P2.1
     54    000004              SEG_C           EQU     %00000100 ; Port pin
                                position P2.2
     55    000008              SEG_D           EQU     %00001000 ; Port pin
                                position P2.3
     56    000010              SEG_E           EQU     %00010000 ; Port pin
                                position P2.4
     57    000020              SEG_F           EQU     %00100000 ; Port pin
                                position P2.5
     58    000040              SEG_G           EQU     %01000000 ; Port pin
                                position P2.6
     59    000080              SEG_DP          EQU     %10000000 ; Port pin
                                position P2.7
     60    000200              
     61    000002              PB_0            EQU     %00000010 ; Port pin
                                position P1.1
     62    000004              PB_1            EQU     %00000100 ; Port pin
                                position P1.2   
     63    000010              PB_2            EQU     %00010000 ; Port pin
                                position P1.4   
     64    000020              PB_3            EQU     %00100000 ; Port pin
                                position P1.5
     65    000008              PB_LPBD         EQU     %00001000 ; Port pin
                                position P1.3 (on LaunchPad bd)
     66    000200              
     67    000029              SEG_PORT        EQU     P2OUT     ; Port 2
                                output lable
     68    000020              PB_PORT         EQU     P1IN      ; Port 1 input
                                lable
     69    000200              
     70    000006              ONE             EQU     %00000110 ; Binary
                                sequence for 1
     71    00005B              TWO             EQU     %01011011 ; Binary
                                sequence for 2
     72    00004F              THREE           EQU     %01001111 ; Binary
                                sequence for 3
     73    000066              FOUR            EQU     %01100110 ; Binary
                                sequence for 4
     74    00006D              FIVE            EQU     %01101101 ; Binary
                                sequence for 5
     75    00007D              SIX             EQU     %01111101 ; Binary
                                sequence for 6
     76    000007              SEVEN           EQU     %00000111 ; Binary
                                sequence for 7
     77    00007F              EIGHT           EQU     %01111111 ; Binary
                                sequence for 8
     78    000067              NINE            EQU     %01100111 ; Binary
                                sequence for 9
     79    00003F              ZERO            EQU     %00111111 ; Binary
                                sequence for 0
     80    000200              
     81    000077              LETTER_A        EQU     %01110111 ; Binary
                                sequence for the letter A
     82    00007C              LETTER_B        EQU     %01111100 ; Binary
                                sequence for the letter b
     83    000039              LETTER_C        EQU     %00111001 ; Binary
                                sequence for the letter C
     84    00005E              LETTER_D        EQU     %01011110 ; Binary
                                sequence for the letter d
     85    000079              LETTER_E        EQU     %01111001 ; Binary
                                sequence for the letter E
     86    000071              LETTER_F        EQU     %01110001 ; Binary
                                sequence for the letter F
     87    000040              LETTER_DASH     EQU     %01000000 ; Binary
                                sequence for the character '-'
     88    000200              
     89    000200              ;-----------------------------------------------
                               --------------------------------
     90    000200              ; Definition of Variables
     91    000200              ;-----------------------------------------------
                               --------------------------------
     92    000200              
     93    000200                              ORG   0x0200     ; beginning of
                                                                 RAM space
                                                                 
     94    000200                                              ;  Assembler
                                Directive for start of RAM 
     95    000200                                              ;  necessary
                                statement
     96    000200                                              ; if RAM
                                variables are used)
     97    000200                                                    
     98    000200              ;-----------------------------------------------
                               --------------------------------
     99    00C000                          ORG     0xC000                  ;
  Program Reset (prog memory start)
    100    00C000                                                          ;
                                this is Program memory start 
    101    00C000                                                          ;
                                address for MSP430G2553 (16K)
    102    00C000              ;-----------------------------------------------
                               --------------------------------
    103    00C000 31400004     RESET       mov.w    #0x0400,SP        ;
                                                                       Initiali
                                                                      ze
                                                                       stackpoi
                                                                      nter(to
                                                                       end of
                                                                       RAM
                                                                       +1)
    104    00C004                                                   ; RAM is
                                512 bytes, last position is 3FFh
    105    00C004                                                   
    106    00C004 B240805A2001 StopWDT     mov.w    #WDTPW+WDTHOLD,&WDTCTL  ;
  Stop WDT (Watchdog timer)
    107    00C00A              
    108    00C00A              SetupP2     
    109    00C00A C2432900                 clr.b    &SEG_PORT ; turn off all
                                                               the segments
                                                               
    110    00C00E F2432A00                 mov.b    #0xFF, &P2DIR ; all as
                                                                   outputs to
                                                                   drive 7-seg
                                                                   LED
    111    00C012 F2C0C0002E00             bic.b    #0xC0, &P2SEL   ; Clears
                                                                     the P2SEL
                                                                     bits so
                                                                     that
                                                                     
    112    00C018                                                     
                                
    113    00C018 F240BE002700             mov.b    #0xBE, &P1REN   ;turn on
                                                                     the
                                                                     internal
                                                                     resistor
                                                                     for
                                                                     PB's
    114    00C01E F240BE002100             mov.b    #0xBE, &P1OUT   ; set the
                                                                     resistors
                                                                     to Pullup
                                                                     mode      
                                                                               
                                                                               
                                                                               
                                                                     
    115    00C024                          
    116    00C024              ReadPort1 ; will test for single button press
                                but not combinations of buttons
    117    00C024              
    118    00C024              ;initially check for the LaunchPad pushbutton
                                case - since we don't care about
    119    00C024              ; state of any other buttons for this case, we
                                can do a simple bit test
    120    00C024              
    121    00C024 F2B22000                 bit.b   #PB_LPBD, &PB_PORT      ;
                                                              check the state
                                                              of P1.3
    122    00C028 3720                     jne     ButtonNotPressed  ;(match)
                                                                      pin was
                                                                      HIGH
                                                                      (button
                                                                      NOT
                                                                      pressed)
    123    00C02A                              ; NOTE:   the jump decision is
                                based on state of ZERO flag
    124    00C02A                              ;  in the Status Register (SR)
                                after doing the bit test
    125    00C02A                          
    126    00C02A              ButtonPressed   ; if pressed
    127    00C02A 3C42                     mov #8, R12 ; set loop counter for
                                                        'ECE-3362' segment
    128    00C02C 3E4000E0                 mov #PatternTable1, R14 ; load
                                                                    starting
                                                                    address of
                                                                    Pattern
                                                                    Table
                                                                    1
    129    00C030                                                  ; that has
                                'ECE-3362' segment
    130    00C030              
    131    00C030              ECELoop
    132    00C030 F24E2900                 mov.b  @R14+, &SEG_PORT ; goto
                                                                    address and
                                                                    load value
                                                                    in
                                                                    &SEG_PORT
    133    00C034 B012ACC0                 call   #Delay_Long      ; delay to
                                                                    show
                                                                    value
    134    00C038 B012B8C0                 call   #Delay_Short
    135    00C03C C2432900                 clr.b  &SEG_PORT        ; clear
                                                                    display
    136    00C040 B012ACC0                 call   #Delay_Long      ; delay to
                                                                    show
                                                                    blank
    137    00C044 B012B8C0                 call   #Delay_Short
    138    00C048 1C83                     dec    R12              ; decrement
                                                                    loop
                                                                    counter
    139    00C04A F223                     jnz    ECELoop          ; if R12 not
                                                                    0, then go
                                                                    back
                                                                    through
                                                                    loop
    140    00C04C                          
    141    00C04C              DisplayOnesDigit
    142    00C04C B012ACC0                 call  #Delay_Long           ; wait
                                                                        before
                                                                        display
                                                                       ing
                                                                        value
    143    00C050 F2407D002900             mov.b #SIX, &SEG_PORT       ;
                                                        display 6 on 7 seg
                                                        display
    144    00C056 B0129AC0                 call  #Delay_Double         ; delay
                                                                        to show
                                                                        value
    145    00C05A C2432900                 clr.b &SEG_PORT             ; clear
                                                                        display
                                                                          
                                                                        
    146    00C05E F24080002900             mov.b #SEG_DP, &SEG_PORT    ;
                                                           display decimal
                                                           point on 7 seg
                                                           display
    147    00C064 B0129AC0                 call  #Delay_Double         ; delay
                                                                        to show
                                                                        value
    148    00C068 C2432900                 clr.b &SEG_PORT             ; clear
                                                                        display
                                                                        
    149    00C06C B012ACC0                 call  #Delay_Long           ; delay
                                                                        to show
                                                                        blank
    150    00C070                          
    151    00C070              ReadExpansionPort
    152    00C070                          
    153    00C070                          ;10BB1BB0 positions - this is actual
                                Port state
    154    00C070                          ;copy PB_PORT into a temporary
                                register for manipulation
    155    00C070 5F422000                 mov.b &PB_PORT, R15 
    156    00C074                          ;mask out everything but the buttons
                                of interest
    157    00C074 7FF03600                 and.b #%00110110, R15
    158    00C078 4F11                     rra.b R15            ;first step in
                                                                 getting them
                                                                 to LSnybble
                                                                 position
    159    00C07A 4E4F                     mov.b R15, R14       ;make a copy
                                                                 for later
                                                                 use
    160    00C07C 7FF01800                 and.b #%00011000, R15  ; isolate
                                                                   these two
                                                                   bits in
                                                                   R15
    161    00C080 4F11                     rra.b R15             ; mov these
                                                                  bits right by
                                                                  one
                                                                  position
    162    00C082 7EF00300                 and.b #%00000011, R14  ; isolate
                                                                   these two
                                                                   bits in
                                                                   R14
    163    00C086 4FDE                     bis.b R14, R15         ;combine all
                                                                   the bits
                                                                   into final
                                                                   result in
                                                                   R15
    164    00C088                          ;R15 now contains the state of the 4
                                pushbuttons in the LSnybble
    165    00C088                          ;these can be used as an index into
                                a table if we have the table
    166    00C088                          ;base address
    167    00C088                          ;NOTE:  these bits are in opposite
                                state from what is needed since
    168    00C088                          ; the pushbuttons are active HIGH,
                                so we need to invert them
    169    00C088 7FE00F00                 xor.b #%00001111, R15
    170    00C08C                            
    171    00C08C 3E4008E0                 mov   #PatternTable2, R14  ; R14 now
                                                                  contains base
                                                                  address of
                                                                  table
    172    00C090 0F5E                     add   R14, R15             ; R15 now
                                                       contains address of item
                                                       in table
    173    00C092 E24F2900                 mov.b @R15, &SEG_PORT      ; move
                                                        contents of address
                                                        into &SEG_PORT
    174    00C096                          
    175    00C096 EC3F                     jmp   ReadExpansionPort    ; keep
                                                                       jumping
                                                                       back to
                                                                       ReadExpa
                                                                      nsionPort
    176    00C098                          
    177    00C098              ButtonNotPressed
    178    00C098                          
    179    00C098 C53F         Done        jmp     ReadPort1           ;  halt
                                                                        here
    180    00C09A                                                    
    181    00C09A              ;-----------------------------------------------
                               --------------------------------
    182    00C09A              ;           End of main code
    183    00C09A              ;-----------------------------------------------
                               --------------------------------                
                                                           
    184    00C09A                                                        
                                
    185    00C09A              ;-----------------------------------------------
                               --------------------------------
    186    00C09A              ;           Subroutines
    187    00C09A              ;-----------------------------------------------
                               -------------------------------- 
    188    00C09A              
    189    00C09A              ; none used here
    190    00C09A              
    191    00C09A              ;-----------------------------------------------
                               --------------------------------
    192    00C09A              ;           End of all Subroutines
    193    00C09A              ;-----------------------------------------------
                               --------------------------------
    194    00C09A              
    195    00C09A              ;-----------------------------------------------
                               --------------------------------
    196    00C09A              ; Delay_Double
    197    00C09A              ;  passed in - nothing
    198    00C09A              ;  returned - nothing
    199    00C09A              ;  accomplishes - double long delay
    200    00C09A              ;  uses: R15
    201    00C09A              ;-----------------------------------------------
                               --------------------------------
    202    00C09A              Delay_Double
    203    00C09A 0F12             push R15     ; save R15 since we use it
                                                 here
    204    00C09C              DelayTopD
    205    00C09C 3F43             mov #LONG_DELAY, R15     ;load loop counter
                                                             (R15) with Long
                                                             Delay constant
    206    00C09E              Loop1LongD
    207    00C09E 1F83             dec R15                     ; decrement loop
                                                                counter
    208    00C0A0 FE23             jnz Loop1LongD               ; Zero yet?, no
                                                                 decrement
                                                                 again
    209    00C0A2              DelayTopD2
    210    00C0A2 3F43             mov #LONG_DELAY, R15     ;load loop counter
                                                             (R15) with Long
                                                             Delay constant
    211    00C0A4              Loop2LongD
    212    00C0A4 1F83             dec R15                     ; decrement loop
                                                                counter
    213    00C0A6 FE23             jnz Loop2LongD               ; Zero yet?, no
                                                                 decrement
                                                                 again
    214    00C0A8              
    215    00C0A8 3F41             pop R15     ; restore R15 before returning
    216    00C0AA 3041             ret         ; return
    217    00C0AC              ;-----------------------------------------------
                               --------------------------------
    218    00C0AC              ;  end of Delay_Double
    219    00C0AC              ;-----------------------------------------------
                               --------------------------------
    220    00C0AC              
    221    00C0AC              ;-----------------------------------------------
                               --------------------------------
    222    00C0AC              ; Delay_Long
    223    00C0AC              ;  passed in - nothing
    224    00C0AC              ;  returned - nothing
    225    00C0AC              ;  accomplishes - long delay
    226    00C0AC              ;  uses: R15
    227    00C0AC              ;-----------------------------------------------
                               --------------------------------
    228    00C0AC              Delay_Long
    229    00C0AC 0F12             push R15     ; save R15 since we use it
                                                 here
    230    00C0AE              DelayTopL
    231    00C0AE 3F43             mov #LONG_DELAY, R15     ;load loop counter
                                                             (R15) with Long
                                                             Delay constant
    232    00C0B0              Loop1Long
    233    00C0B0 1F83             dec R15                     ; decrement loop
                                                                counter
    234    00C0B2 FE23             jnz Loop1Long               ; Zero yet?, no
                                                                decrement
                                                                again
    235    00C0B4              
    236    00C0B4 3F41             pop R15     ; restore R15 before returning
    237    00C0B6 3041             ret         ; return
    238    00C0B8              ;-----------------------------------------------
                               --------------------------------
    239    00C0B8              ;  end of Delay_Long
    240    00C0B8              ;-----------------------------------------------
                               --------------------------------
    241    00C0B8              
    242    00C0B8              ;-----------------------------------------------
                               --------------------------------
    243    00C0B8              ; Delay_Short
    244    00C0B8              ;  passed in - nothing
    245    00C0B8              ;  returned - nothing
    246    00C0B8              ;  accomplishes - short delay
    247    00C0B8              ;  uses: R15
    248    00C0B8              ;-----------------------------------------------
                               --------------------------------
    249    00C0B8              Delay_Short
    250    00C0B8 0F12             push R15     ; save R15 since we use it
                                                 here
    251    00C0BA              DelayTopS
    252    00C0BA 3F401027         mov #SHORT_DELAY, R15     ;load loop counter
                                                              (R15) with Long
                                                              Delay constant
    253    00C0BE              Loop1Short
    254    00C0BE 1F83             dec R15                     ; decrement loop
                                                                counter
    255    00C0C0 FE23             jnz Loop1Short               ; Zero yet?, no
                                                                 decrement
                                                                 again
    256    00C0C2              
    257    00C0C2 3F41             pop R15     ; restore R15 before returning
    258    00C0C4 3041             ret         ; return
    259    00C0C6              ;-----------------------------------------------
                               --------------------------------
    260    00C0C6              ;  end of Delay_Short
    261    00C0C6              ;-----------------------------------------------
                               --------------------------------
    262    00C0C6              
    263    00C0C6              
    264    00C0C6              ;-----------------------------------------------
                               --------------------------------
    265    00C0C6              ;           Definition of Program Data Memory
                                
    266    00C0C6              ;-----------------------------------------------
                               --------------------------------
    267    00E000                          ORG   0xE000   ; this line not
                                                           strictly necessary,
                                                           but does force
    268    00E000                                          ; the location of
                                this program memory data - this is
    269    00E000                                          ; a matter of
                                convenience  - need to leave enough
    270    00E000                                          ; space ahead of
                                Interrupt Vectors for the data that
    271    00E000                                          ; we are putting
                                here
    272    00E000                                          
    273    00E000              PatternTable1           ; pattern table 1 is for
                                the 'ECE-3362' segment
    274    00E000 79           Row0    DB  LETTER_E    ; these addresses hold
                                                        the bit positions which
                                                        will
    275    00E001 39           Row1    DB  LETTER_C    ; sent to &SEG_PORT and
                                                        displayed
    276    00E002 79           Row2    DB  LETTER_E   
    277    00E003 40           Row3    DB  LETTER_DASH
    278    00E004 4F           Row4    DB  THREE
    279    00E005 4F           Row5    DB  THREE
    280    00E006 7D           Row6    DB  SIX
    281    00E007 5B           Row7    DB  TWO
    282    00E008              
    283    00E008              PatternTable2           ; pattern table 2 is for
                                the 4 pushbutton sequence      
    284    00E008 3F                   DB  ZERO        ; that allows the
                                                        assembler to find the
                                                        proper value     
                                                        
    285    00E009 06                   DB  ONE         ; faster by adding the
                                                        start address and the
                                                        corresponding
    286    00E00A 5B                   DB  TWO         ; hex value from the
                                                        user button press
                                                        
    287    00E00B 4F                   DB  THREE
    288    00E00C 66                   DB  FOUR
    289    00E00D 6D                   DB  FIVE
    290    00E00E 7D                   DB  SIX
    291    00E00F 07                   DB  SEVEN
    292    00E010 7F                   DB  EIGHT
    293    00E011 67                   DB  NINE
    294    00E012 77                   DB  LETTER_A
    295    00E013 7C                   DB  LETTER_B
    296    00E014 39                   DB  LETTER_C
    297    00E015 5E                   DB  LETTER_D
    298    00E016 79                   DB  LETTER_E
    299    00E017 71                   DB  LETTER_F
    300    00E018              
    301    00E018              ;-----------------------------------------------
                               --------------------------------
    302    00E018              ;           Interrupt Vectors
    303    00E018              ;-----------------------------------------------
                               --------------------------------
    304    00E018              
    305    00FFFE                          ORG     0xFFFE                  ;
  MSP430 RESET Vector
    306    00FFFE 00C0                     DW      RESET                   ;
                                                     establishes the label
                                                     RESET as 
    307    010000                                                          ;
                                the starting point
    308    010000                                                         
                                
    309    010000              ;-----------------------------------------------
                               --------------------------------                
                                                           
    310    010000                          END                             ;
                                END of all code for this program



Segment             Type 	Mode
----------------------------------------
ASEG                CODE  	ABS Org:200 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
ADC10AE0            ABS    CONST UNTYP.           ASEG       4A 
ADC10CTL0           ABS    CONST UNTYP.           ASEG       1B0 
ADC10CTL1           ABS    CONST UNTYP.           ASEG       1B2 
ADC10DTC0           ABS    CONST UNTYP.           ASEG       48 
ADC10DTC1           ABS    CONST UNTYP.           ASEG       49 
ADC10MEM            ABS    CONST UNTYP.           ASEG       1B4 
ADC10SA             ABS    CONST UNTYP.           ASEG       1BC 
BCSCTL1             ABS    CONST UNTYP.           ASEG       57 
BCSCTL2             ABS    CONST UNTYP.           ASEG       58 
BCSCTL3             ABS    CONST UNTYP.           ASEG       53 
ButtonNotPressed    ABS    CONST UNTYP.           ASEG       C098 
ButtonPressed       ABS    CONST UNTYP.           ASEG       C02A 
CACTL1              ABS    CONST UNTYP.           ASEG       59 
CACTL2              ABS    CONST UNTYP.           ASEG       5A 
CALBC1_12MHZ        ABS    CONST UNTYP.           ASEG       10FB 
CALBC1_16MHZ        ABS    CONST UNTYP.           ASEG       10F9 
CALBC1_1MHZ         ABS    CONST UNTYP.           ASEG       10FF 
CALBC1_8MHZ         ABS    CONST UNTYP.           ASEG       10FD 
CALDCO_12MHZ        ABS    CONST UNTYP.           ASEG       10FA 
CALDCO_16MHZ        ABS    CONST UNTYP.           ASEG       10F8 
CALDCO_1MHZ         ABS    CONST UNTYP.           ASEG       10FE 
CALDCO_8MHZ         ABS    CONST UNTYP.           ASEG       10FC 
CAPD                ABS    CONST UNTYP.           ASEG       5B 
DCOCTL              ABS    CONST UNTYP.           ASEG       56 
DelayTopD           ABS    CONST UNTYP.           ASEG       C09C 
DelayTopD2          ABS    CONST UNTYP.           ASEG       C0A2 
DelayTopL           ABS    CONST UNTYP.           ASEG       C0AE 
DelayTopS           ABS    CONST UNTYP.           ASEG       C0BA 
Delay_Double        ABS    CONST UNTYP.           ASEG       C09A 
Delay_Long          ABS    CONST UNTYP.           ASEG       C0AC 
Delay_Short         ABS    CONST UNTYP.           ASEG       C0B8 
DisplayOnesDigit    ABS    CONST UNTYP.           ASEG       C04C 
Done                ABS    CONST UNTYP.           ASEG       C098 
ECELoop             ABS    CONST UNTYP.           ASEG       C030 
EIGHT               ABS    CONST UNTYP.           ASEG       7F 
FCTL1               ABS    CONST UNTYP.           ASEG       128 
FCTL2               ABS    CONST UNTYP.           ASEG       12A 
FCTL3               ABS    CONST UNTYP.           ASEG       12C 
FIVE                ABS    CONST UNTYP.           ASEG       6D 
FOUR                ABS    CONST UNTYP.           ASEG       66 
IE1                 ABS    CONST UNTYP.           ASEG       0 
IE2                 ABS    CONST UNTYP.           ASEG       1 
IFG1                ABS    CONST UNTYP.           ASEG       2 
IFG2                ABS    CONST UNTYP.           ASEG       3 
LETTER_A            ABS    CONST UNTYP.           ASEG       77 
LETTER_B            ABS    CONST UNTYP.           ASEG       7C 
LETTER_C            ABS    CONST UNTYP.           ASEG       39 
LETTER_D            ABS    CONST UNTYP.           ASEG       5E 
LETTER_DASH         ABS    CONST UNTYP.           ASEG       40 
LETTER_E            ABS    CONST UNTYP.           ASEG       79 
LETTER_F            ABS    CONST UNTYP.           ASEG       71 
LONG_DELAY          ABS    CONST UNTYP.           ASEG       FFFF 
Loop1Long           ABS    CONST UNTYP.           ASEG       C0B0 
Loop1LongD          ABS    CONST UNTYP.           ASEG       C09E 
Loop1Short          ABS    CONST UNTYP.           ASEG       C0BE 
Loop2LongD          ABS    CONST UNTYP.           ASEG       C0A4 
NINE                ABS    CONST UNTYP.           ASEG       67 
ONE                 ABS    CONST UNTYP.           ASEG       6 
P1DIR               ABS    CONST UNTYP.           ASEG       22 
P1IE                ABS    CONST UNTYP.           ASEG       25 
P1IES               ABS    CONST UNTYP.           ASEG       24 
P1IFG               ABS    CONST UNTYP.           ASEG       23 
P1IN                ABS    CONST UNTYP.           ASEG       20 
P1OUT               ABS    CONST UNTYP.           ASEG       21 
P1REN               ABS    CONST UNTYP.           ASEG       27 
P1SEL               ABS    CONST UNTYP.           ASEG       26 
P1SEL2              ABS    CONST UNTYP.           ASEG       41 
P2DIR               ABS    CONST UNTYP.           ASEG       2A 
P2IE                ABS    CONST UNTYP.           ASEG       2D 
P2IES               ABS    CONST UNTYP.           ASEG       2C 
P2IFG               ABS    CONST UNTYP.           ASEG       2B 
P2IN                ABS    CONST UNTYP.           ASEG       28 
P2OUT               ABS    CONST UNTYP.           ASEG       29 
P2REN               ABS    CONST UNTYP.           ASEG       2F 
P2SEL               ABS    CONST UNTYP.           ASEG       2E 
P2SEL2              ABS    CONST UNTYP.           ASEG       42 
P3DIR               ABS    CONST UNTYP.           ASEG       1A 
P3IN                ABS    CONST UNTYP.           ASEG       18 
P3OUT               ABS    CONST UNTYP.           ASEG       19 
P3REN               ABS    CONST UNTYP.           ASEG       10 
P3SEL               ABS    CONST UNTYP.           ASEG       1B 
P3SEL2              ABS    CONST UNTYP.           ASEG       43 
PB_0                ABS    CONST UNTYP.           ASEG       2 
PB_1                ABS    CONST UNTYP.           ASEG       4 
PB_2                ABS    CONST UNTYP.           ASEG       10 
PB_3                ABS    CONST UNTYP.           ASEG       20 
PB_LPBD             ABS    CONST UNTYP.           ASEG       8 
PB_PORT             ABS    CONST UNTYP.           ASEG       20 
PatternTable1       ABS    CONST UNTYP.           ASEG       E000 
PatternTable2       ABS    CONST UNTYP.           ASEG       E008 
RESET               ABS    CONST UNTYP.           ASEG       C000 
ReadExpansionPort   ABS    CONST UNTYP.           ASEG       C070 
ReadPort1           ABS    CONST UNTYP.           ASEG       C024 
Row0                ABS    CONST UNTYP.           ASEG       E000 
Row1                ABS    CONST UNTYP.           ASEG       E001 
Row2                ABS    CONST UNTYP.           ASEG       E002 
Row3                ABS    CONST UNTYP.           ASEG       E003 
Row4                ABS    CONST UNTYP.           ASEG       E004 
Row5                ABS    CONST UNTYP.           ASEG       E005 
Row6                ABS    CONST UNTYP.           ASEG       E006 
Row7                ABS    CONST UNTYP.           ASEG       E007 
SEG_A               ABS    CONST UNTYP.           ASEG       1 
SEG_B               ABS    CONST UNTYP.           ASEG       2 
SEG_C               ABS    CONST UNTYP.           ASEG       4 
SEG_D               ABS    CONST UNTYP.           ASEG       8 
SEG_DP              ABS    CONST UNTYP.           ASEG       80 
SEG_E               ABS    CONST UNTYP.           ASEG       10 
SEG_F               ABS    CONST UNTYP.           ASEG       20 
SEG_G               ABS    CONST UNTYP.           ASEG       40 
SEG_PORT            ABS    CONST UNTYP.           ASEG       29 
SEVEN               ABS    CONST UNTYP.           ASEG       7 
SHORT_DELAY         ABS    CONST UNTYP.           ASEG       2710 
SIX                 ABS    CONST UNTYP.           ASEG       7D 
SetupP2             ABS    CONST UNTYP.           ASEG       C00A 
StopWDT             ABS    CONST UNTYP.           ASEG       C004 
TA0CCR0             ABS    CONST UNTYP.           ASEG       172 
TA0CCR1             ABS    CONST UNTYP.           ASEG       174 
TA0CCR2             ABS    CONST UNTYP.           ASEG       176 
TA0CCTL0            ABS    CONST UNTYP.           ASEG       162 
TA0CCTL1            ABS    CONST UNTYP.           ASEG       164 
TA0CCTL2            ABS    CONST UNTYP.           ASEG       166 
TA0CTL              ABS    CONST UNTYP.           ASEG       160 
TA0IV               ABS    CONST UNTYP.           ASEG       12E 
TA0R                ABS    CONST UNTYP.           ASEG       170 
TA1CCR0             ABS    CONST UNTYP.           ASEG       192 
TA1CCR1             ABS    CONST UNTYP.           ASEG       194 
TA1CCR2             ABS    CONST UNTYP.           ASEG       196 
TA1CCTL0            ABS    CONST UNTYP.           ASEG       182 
TA1CCTL1            ABS    CONST UNTYP.           ASEG       184 
TA1CCTL2            ABS    CONST UNTYP.           ASEG       186 
TA1CTL              ABS    CONST UNTYP.           ASEG       180 
TA1IV               ABS    CONST UNTYP.           ASEG       11E 
TA1R                ABS    CONST UNTYP.           ASEG       190 
THREE               ABS    CONST UNTYP.           ASEG       4F 
TLV_ADC10_1_LEN     ABS    CONST UNTYP.           ASEG       10DB 
TLV_ADC10_1_TAG     ABS    CONST UNTYP.           ASEG       10DA 
TLV_CHECKSUM        ABS    CONST UNTYP.           ASEG       10C0 
TLV_DCO_30_LEN      ABS    CONST UNTYP.           ASEG       10F7 
TLV_DCO_30_TAG      ABS    CONST UNTYP.           ASEG       10F6 
TWO                 ABS    CONST UNTYP.           ASEG       5B 
UCA0ABCTL           ABS    CONST UNTYP.           ASEG       5D 
UCA0BR0             ABS    CONST UNTYP.           ASEG       62 
UCA0BR1             ABS    CONST UNTYP.           ASEG       63 
UCA0CTL0            ABS    CONST UNTYP.           ASEG       60 
UCA0CTL1            ABS    CONST UNTYP.           ASEG       61 
UCA0IRRCTL          ABS    CONST UNTYP.           ASEG       5F 
UCA0IRTCTL          ABS    CONST UNTYP.           ASEG       5E 
UCA0MCTL            ABS    CONST UNTYP.           ASEG       64 
UCA0RXBUF           ABS    CONST UNTYP.           ASEG       66 
UCA0STAT            ABS    CONST UNTYP.           ASEG       65 
UCA0TXBUF           ABS    CONST UNTYP.           ASEG       67 
UCB0BR0             ABS    CONST UNTYP.           ASEG       6A 
UCB0BR1             ABS    CONST UNTYP.           ASEG       6B 
UCB0CTL0            ABS    CONST UNTYP.           ASEG       68 
UCB0CTL1            ABS    CONST UNTYP.           ASEG       69 
UCB0I2CIE           ABS    CONST UNTYP.           ASEG       6C 
UCB0I2COA           ABS    CONST UNTYP.           ASEG       118 
UCB0I2CSA           ABS    CONST UNTYP.           ASEG       11A 
UCB0RXBUF           ABS    CONST UNTYP.           ASEG       6E 
UCB0STAT            ABS    CONST UNTYP.           ASEG       6D 
UCB0TXBUF           ABS    CONST UNTYP.           ASEG       6F 
WDTCTL              ABS    CONST UNTYP.           ASEG       120 
ZERO                ABS    CONST UNTYP.           ASEG       3F 


##############################
#          CRC:5378          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 224         #
##############################



