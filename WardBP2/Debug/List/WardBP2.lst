###############################################################################
#                                                                             #
#     IAR Assembler V6.50.1.967/W32  for MSP430 11/Oct/2018  21:06:26         #
#     Copyright 1996-2016 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP2\WardBP2.s43#
#           List file     =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP2\Debug\List\WardBP2.lst#
#           Object file   =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP2\Debug\Obj\WardBP2.r43#
#           Command line  =  C:\Users\PikesPlace\Documents\ECE 3362\WardBP2\WardBP2.s43 #
#                            -OC:\Users\PikesPlace\Documents\ECE 3362\WardBP2\Debug\Obj #
#                            -s+ -M<> -w+                                     #
#                            -LC:\Users\PikesPlace\Documents\ECE 3362\WardBP2\Debug\List #
#                            -t8 -x -r -D__MSP430G2553__                      #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 7.4\430\INC\ #
#                                                                             #
###############################################################################

      1    000200              ;-----------------------------------------------
                               --------------------------------
      2    000200              ; ECE 3362-002 Project 2 - 4 digit 7 segment
                                display program.
      3    000200              ;       This program will utilize an expansion
                                board that has a 4 digit 7-segment
      4    000200              ;       display wired on it.  The combination
                                5418 will be displayed. After that
      5    000200              ;       the user will be able to manipulate the
                                LEDs by pressing the pushbuttons. 
      6    000200              ;       When the user presses one of the button,
                                the combination will change to
      7    000200              ;       either 54--, --18, or 54.:1.8.
      8    000200              ;       
      9    000200              ;  Purpose: This program is designed to
                                introduce the student into the usage 
     10    000200              ;       of an expansion board, a 7-segment 4
                                digit board, use of the clock, 
     11    000200              ;       and timer interrupts.
     12    000200              ;
     13    000200              ;   Target: TI LaunchPad development board with
                                MSP430G2553 device installed
     14    000200              ;
     15    000200              ;       Date:           Oct 11, 2018
     16    000200              ;       Last Revision:  1.0
     17    000200              ;       Written by:     Bradley Ward, ECE dept,
                                Texas Tech University
     18    000200              ;       Adapted from:   Provided code examples;
                                Dr. M. Helm, October 2018   
     19    000200              ;                       DemoWith_4digitExpansion
                               BdSimpleTimerInterrupt
     20    000200              ;       Assembler/IDE:  IAR Embedded Workbench
                                6.5
     21    000200              ;
     22    000200              ;       HW I/O assignments:
     23    000200              ;       P1.0    (output) Segment A (active low)
                                drives display board
     24    000200              ;       P1.1    (output) Segment B (active low)
                                drives display board
     25    000200              ;       P1.2    (output) Segment C (active low)
                                drives display board
     26    000200              ;       P1.3    (output) Segment D (active low)
                                drives display board
     27    000200              ;       P1.4    (output) Segment E (active low)
                                drives display board
     28    000200              ;       P1.5    (output) Segment F (active low)
                                drives display board
     29    000200              ;       P1.6    (output) Segment G (active low)
                                drives display board
     30    000200              ;       P1.7    (output) Segment DP (active low)
                                drives display board
     31    000200              ;
     32    000200              ;       P2.0    (output) Digit 3 (active low)
                                MSdigit (leftmost)
     33    000200              ;       P2.1    (output) Digit 2 (active low) 
                                
     34    000200              ;       P2.2    (output) Digit 1 (active low) 
                                
     35    000200              ;       P2.3    (output) Digit 0 (active low)
                                LSdigit (rightmost)
     36    000200              ;       P2.4    (output) Other - (dots -
                                colon)
     37    000200              ;       P2.5    (input)  Pushbutton 0 (active
                                low) (rightmost)
     38    000200              ;       P2.6    (input)  Pushbutton 1 (active
                                low) (middle)
     39    000200              ;       P2.7    (input)  Pushbutton 2 (active
                                low) (leftmost)
     40    000200              ;
     41    000200              ;
     42    000200              ;
     43    000200              ;***********************************************
                               ********************************
     44    000200              #include  "msp430g2553.h"
     45    000200              ;-----------------------------------------------
                               --------------------------------
     46    000200              ; Definition of Constants
     47    000200              ;-----------------------------------------------
                               --------------------------------
     48    000200              
     49    000200              ; NOTE: purposely set slow to demonstrate
                                display multiplexing
     50    000064              TIMER_A_COUNT_1   EQU   100    ; set count value
                                in TimerA_0 
     51    000200              
     52    000200              ;definitions of segment positions 
     53    000001              SEG_A         EQU     %00000001 ; Port pin
                                position P1.0
     54    000002              SEG_B         EQU     %00000010 ; Port pin
                                position P1.1
     55    000004              SEG_C         EQU     %00000100 ; Port pin
                                position P1.2
     56    000008              SEG_D         EQU     %00001000 ; Port pin
                                position P1.3
     57    000010              SEG_E         EQU     %00010000 ; Port pin
                                position P1.4
     58    000020              SEG_F         EQU     %00100000 ; Port pin
                                position P1.5
     59    000040              SEG_G         EQU     %01000000 ; Port pin
                                position P1.6
     60    000080              SEG_DP        EQU     %10000000 ; Port pin
                                position P1.7
     61    000200              
     62    000200              ;since inverted pattern is needed for the
                                display, this defines inverse pattern
     63    FFFFFE              SEG_A_N       EQU     ~SEG_A ; Port pin position
                                P1.0
     64    FFFFFD              SEG_B_N       EQU     ~SEG_B ; Port pin position
                                P1.1
     65    FFFFFB              SEG_C_N       EQU     ~SEG_C ; Port pin position
                                P1.2
     66    FFFFF7              SEG_D_N       EQU     ~SEG_D ; Port pin position
                                P1.3
     67    FFFFEF              SEG_E_N       EQU     ~SEG_E ; Port pin position
                                P1.4
     68    FFFFDF              SEG_F_N       EQU     ~SEG_F ; Port pin position
                                P1.5
     69    FFFFBF              SEG_G_N       EQU     ~SEG_G ; Port pin position
                                P1.6
     70    FFFF7F              SEG_DP_N      EQU     ~SEG_DP ; Port pin
                                position P1.7
     71    000200              
     72    000200              ;NOTE: display board requires INVERSE of these
                                patterns due to Active LOW
     73    000001              DIG_3         EQU     %00000001 ; Port pin
                                position P2.0 (MSdigit)
     74    000002              DIG_2         EQU     %00000010 ; Port pin
                                position P2.1
     75    000004              DIG_1         EQU     %00000100 ; Port pin
                                position P2.2
     76    000008              DIG_0         EQU     %00001000 ; Port pin
                                position P2.3(LSdigit)
     77    000010              DP_COM        EQU     %00010000 ; Port pin
                                position P2.4
     78    000200              
     79    000200              ;since inverted pattern is needed for the
                                display, this defines inverse pattern
     80    FFFFFE              DIG_3_N       EQU     ~DIG_3 ; Port pin position
                                P2.0 (MSdigit)
     81    FFFFFD              DIG_2_N       EQU     ~DIG_2 ; Port pin position
                                P2.1
     82    FFFFFB              DIG_1_N       EQU     ~DIG_1 ; Port pin position
                                P2.2
     83    FFFFF7              DIG_0_N       EQU     ~DIG_0 ; Port pin position
                                P2.3(LSdigit)
     84    FFFFEF              DP_COM_N      EQU     ~DP_COM ; Port pin
                                position P2.4
     85    000200              
     86    000200              
     87    000020              PB_0         EQU     %00100000 ; Port pin
                                position P2.4
     88    000040              PB_1         EQU     %01000000 ; Port pin
                                position P2.5
     89    000080              PB_2         EQU     %10000000 ; Port pin
                                position P2.6
     90    000200              
     91    000200              
     92    000021              SEG_PORT         EQU     P1OUT  ; Segment Label
                                for Port 1
     93    000029              DIG_PORT         EQU     P2OUT  ; Digit Label
                                for Port 2.0-.4
     94    000028              PB_PORT          EQU     P2IN   ; Pushbutton
                                Label for Port 2.5-7
     95    000200              
     96    000200              ;NOTE: display bd requires the INVERSE of these
                                patterns due to Active LOW
     97    000006              ONE             EQU     %00000110
     98    00005B              TWO             EQU     %01011011
     99    00004F              THREE           EQU     %01001111
    100    000066              FOUR            EQU     %01100110
    101    00006D              FIVE            EQU     %01101101
    102    00007D              SIX             EQU     %01111101
    103    000007              SEVEN           EQU     %00000111
    104    00007F              EIGHT           EQU     %01111111
    105    000067              NINE            EQU     %01100111
    106    00003F              ZERO            EQU     %00111111
    107    000200              
    108    000200              ;since inverted pattern is needed for the
                                display, this defines inverse pattern
    109    FFFFF9              ONE_N           EQU     ~%00000110
    110    FFFFA4              TWO_N           EQU     ~%01011011
    111    FFFFB0              THREE_N         EQU     ~%01001111
    112    FFFF99              FOUR_N          EQU     ~%01100110
    113    FFFF92              FIVE_N          EQU     ~%01101101
    114    FFFF82              SIX_N           EQU     ~%01111101
    115    FFFFF8              SEVEN_N         EQU     ~%00000111
    116    FFFF80              EIGHT_N         EQU     ~%01111111
    117    FFFF98              NINE_N          EQU     ~%01100111
    118    FFFFC0              ZERO_N          EQU     ~%00111111
    119    FFFFBF              DASH_C          EQU     ~%01000000
    120    FFFF19              FOUR_DP         EQU     ~%11100110
    121    FFFF79              ONE_DP          EQU     ~%10000110
    122    000200              
    123    000200              
    124    000200              ;-----------------------------------------------
                               --------------------------------
    125    000200              ; Definition of Variables
    126    000200              ;-----------------------------------------------
                               --------------------------------
    127    000200              
    128    000200                          ORG   0x0200     ; beginning of RAM
                                                             space (necessary
                                                             statement)
    129    000200                          
    130    000200 0000         DisplayValue  DW  0         ; contains 4 digit
                                                            value to display in
                                                            BCD format
    131    000202                                          ; BCDdig3 | BCDdig2 
                                | BCDdig1  | BCDdig0
    132    000202                                          ; xxxx      xxxx    
                                  xxxx       xxxx
    133    000202                                          
    134    000202 00           CurrentDigitPos  DB  0      ;global variable
                                                            used by WriteDigitT
                                                           oDisplay ISR
    135    000203                                          ; holds digit
                                position of current digit to write
    136    000203                                          
    137    000203 00           CurrentDigitValue DB 0      ;global variable
                                                            used by WriteDigitT
                                                           oDisplay ISR
    138    000204                                          ; holds digit value
                                of next digit to write                         
                                 
    139    000204              
    140    000204              ;-----------------------------------------------
                               --------------------------------
    141    00C000                          ORG     0xC000                  ;
  Program Reset (prog memory start)
    142    00C000                                                          ;
                                this is Program memory start 
    143    00C000                                                          ;
                                address for MSP430G2553 (16K)
    144    00C000              ;-----------------------------------------------
                               --------------------------------
    145    00C000 31400004     RESET       mov.w   #0x0400,SP        ;
                                                                      Initializ
                                                                     e
                                                                      stackpoin
                                                                     ter(to end
                                                                      of RAM
                                                                      +1)
    146    00C004                                                   ; RAM is
                                512 bytes, last position is 3FFh
    147    00C004                                                   
    148    00C004 B240805A2001 StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ;
  Stop WDT
    149    00C00A              
    150    00C00A F2432200     SetupP1     mov.b   #0xFF, &P1DIR  ; all as
                                                                   outputs     
                                                                      
                                                                   
    151    00C00E F2401F002A00             mov.b   #0x1F, &P2DIR ; all but 3
                                                                  MSbits as
                                                                  outputs  
                                                                  
    152    00C014              
    153    00C014              ; activate the General Purpose Digital I/O mode
                                for P2.6 and P2.7
    154    00C014 F2C0C0002E00            bic.b   #PB_1+PB_2, &P2SEL
    155    00C01A                                                              
                                                                      
                                
    156    00C01A                         ; The PushButtons are wired to
                                P2.5,6,7 (active LOW), so we need to 
                                
    157    00C01A                         ; turn on the internal Pullup
                                Resistors  - this is done with P2REN
    158    00C01A                         ; register
    159    00C01A                         
    160    00C01A                         ; 
    161    00C01A F240E0002F00            mov.b    #PB_0+PB_1+PB_2, &P2REN   
                                                          ;turn on the internal
                                                          resistor
    162    00C020 F240E0002900            mov.b    #PB_0+PB_1+PB_2, &P2OUT    ;
                                                          set the resistor to
                                                          Pullup mode
    163    00C026                         
    164    00C026                         ; turn off all the segments and
                                digits
    165    00C026 F2432100                mov.b #0xFF, &SEG_PORT
    166    00C02A F2432900                mov.b #0xFF, &DIG_PORT    
    167    00C02E                         
    168    00C02E              SetupTimerA
    169    00C02E B24064007201             mov.w   #TIMER_A_COUNT_1,&TA0CCR0
                                                                     ;load a
                                                                     count
                                                                     value into
                                                                     the
                                                                     counter
    170    00C034 B24010006201             mov.w   #CCIE,&TA0CCTL0        ;
  enable the timer interrupt
    171    00C03A              
    172    00C03A                          ;mov.w   #TASSEL_2+ID_1+MC_1,&TA0CTL
                                  ; select SMCLK/2, up mode
    173    00C03A B240D0026001             mov.w   #TASSEL_2+ID_3+MC_1,&TA0CTL 
   ; select SMCLK/8, up mode            
    174    00C040                    
    175    00C040              
    176    00C040                          
    177    00C040              EnableGeneralInterrupts
    178    00C040 72D2                     bis.b #GIE,SR          ; enable the
                                                                   general
                                                                   interrupts
                                                                   bit
    179    00C042                          ; eint    ; this is another option
                                to do the same thing
    180    00C042               
    181    00C042                  ; start of main program   
    182    00C042              
    183    00C042              DisplayTop     
    184    00C042 0E43                    clr R14 ; clear the test register so
                                                   colon doesn't rewrite on
                                                   other
    185    00C044                                 ; button presses
    186    00C044                         ;put something into DisplayValue so
                                we can write it out
    187    00C044 B24018540002            mov #0x5418, &DisplayValue
    188    00C04A                         
    189    00C04A              Done      
    190    00C04A                        ; test which button is being pressed
                                and jump that specific case
    191    00C04A F2B020002800           bit.b #PB_0, &PB_PORT
    192    00C050 0924                     jeq Case_Zero
    193    00C052                        
    194    00C052 F2B080002800           bit.b #PB_2, &PB_PORT
    195    00C058 0A24                     jeq Case_One
    196    00C05A                        
    197    00C05A F2B040002800           bit.b #PB_1, &PB_PORT
    198    00C060 0B24                     jeq Case_Two
    199    00C062                        
    200    00C062 F33F                   jmp Done ; idle here and wait on Timer
                                                   interrupts
    201    00C064                                 ; Each timer interrupt will
                                update next digit in display 
    202    00C064                                 
    203    00C064              Case_Zero 
    204    00C064                        ; if the right button is pressed
    205    00C064 0E43                    clr R14      ; clear test register to
                                                        stop drawing colon
    206    00C066 B24018AA0002            mov #0xAA18, &DisplayValue ; put AA18
                                                                      in to
                                                                      DisplayVa
                                                                     lue to be
                                                                      write
    207    00C06C                                                    ; out
                                --18
    208    00C06C EE3F                    jmp Done
    209    00C06E                         
    210    00C06E              Case_One
    211    00C06E                         ; if the middle button is pressed
    212    00C06E B240C85B0002            mov #0x5BC8, &DisplayValue ; put 5BC8
                                                                      in to
                                                                      DisplayVa
                                                                     lue to
                                                                      write
    213    00C074                                                    ; out
                                54.:1.8
    214    00C074 5E43                    mov.b #0x01, R14 ; put value in test
                                                            register for
                                                            drawing the
                                                            colon
    215    00C076 E93F                    jmp Done          
    216    00C078                        
    217    00C078              Case_Two   
    218    00C078                         ; if the left button is pressed
    219    00C078 0E43                    clr R14      ; clear test register to
                                                        stop drawing colon
    220    00C07A B240AA540002            mov #0x54AA, &DisplayValue ; put 54AA
                                                                      in to
                                                                      DisplayVa
                                                                     lue to be
                                                                      write
    221    00C080                                                    ; out
                                54--
    222    00C080 E43F                    jmp Done
    223    00C082              ;-----------------------------------------------
                               --------------------------------
    224    00C082              ;           End of main code
    225    00C082              ;-----------------------------------------------
                               --------------------------------                
                                                           
    226    00C082                                                        
                                
    227    00C082              ;-----------------------------------------------
                               --------------------------------
    228    00C082              ;           Subroutines
    229    00C082              ;-----------------------------------------------
                               -------------------------------- 
    230    00C082              
    231    00C082              ;-----------------------------------------------
                               --------------------------------
    232    00C082              ; WriteNextDigitToDisplay
    233    00C082              ;  passed in - DisplayValue, CurrentDigitPos
                                
    234    00C082              ;  returned - nothing
    235    00C082              ;  accomplishes - Writes next digit to the
                                expansion bd display
    236    00C082              ;  uses: R15, global variable CurrentDigitPos,
                                CurrentDigitValue
    237    00C082              ;-----------------------------------------------
                               --------------------------------
    238    00C082              WriteNextDigitToDisplay
    239    00C082 0F12             push R15     ; save R15 since we use it
                                                 here
    240    00C084                  ; turn off all the segments and digits
    241    00C084 F2432100         mov.b #0xFF, &SEG_PORT
    242    00C088 F2432900         mov.b #0xFF, &DIG_PORT 
    243    00C08C                  
    244    00C08C 82930202         cmp #0, &CurrentDigitPos
    245    00C090 1024             jeq  WriteDig0
    246    00C092                  
    247    00C092 92930202         cmp #1, &CurrentDigitPos
    248    00C096 1924             jeq  WriteDig1
    249    00C098                  
    250    00C098 A2930202         cmp #2, &CurrentDigitPos
    251    00C09C 2624             jeq  WriteDig2
    252    00C09E                  
    253    00C09E B29003000202     cmp #3, &CurrentDigitPos
    254    00C0A4 2F24             jeq  WriteDig3
    255    00C0A6                  
    256    00C0A6 A2920202         cmp #4, &CurrentDigitPos
    257    00C0AA 3D24             jeq  TestColon
    258    00C0AC                  
    259    00C0AC                  ; invalid case - CurrentDigPos is invalid
                                value
    260    00C0AC 82430202         clr &CurrentDigitPos   ; reset it
    261    00C0B0 453C             jmp DoneWithDigitWriteTotally  ; get out of
                                                                   here
    262    00C0B2                  
    263    00C0B2              WriteDig0
    264    00C0B2 1F420002         mov &DisplayValue, R15  ; make a copy
    265    00C0B6 3FF00F00         and #0x000F, R15         ; mask out all but
                                                             Dig 0
    266    00C0BA                  ; use the value in R15 as an offset or index
                                into SegPatternTable
    267    00C0BA 3F5000E0         add #SegPatternTable, R15  ; R15 now points
                                                               to correct Seg
                                                               pattern to
                                                               write
    268    00C0BE E04F613F         mov.b @R15, SEG_PORT       ; set up the
                                                               pattern to
                                                               write
    269    00C0C2 F040F7FF633F     mov.b #DIG_0_N, DIG_PORT
    270    00C0C8 373C             jmp DoneWithDigitWrite
    271    00C0CA                  
    272    00C0CA              WriteDig1
    273    00C0CA 1F420002         mov &DisplayValue, R15  ; make a copy
    274    00C0CE 3FF0F000         and #0x00F0, R15         ; mask out all but
                                                             Dig 1
    275    00C0D2 0F11             rra R15                     ; get the value
                                                                into LSnibble
                                                                position
    276    00C0D4 0F11             rra R15
    277    00C0D6 0F11             rra R15
    278    00C0D8 0F11             rra R15
    279    00C0DA                  ; use the value in R15 as an offset or index
                                into SegPatternTable
    280    00C0DA 3F5000E0         add #SegPatternTable, R15  ; R15 now points
                                                               to correct Seg
                                                               pattern to
                                                               write
    281    00C0DE E04F413F         mov.b @R15, SEG_PORT       ; set up the
                                                               pattern to
                                                               write
    282    00C0E2 F040FBFF433F     mov.b #DIG_1_N, DIG_PORT
    283    00C0E8 273C             jmp DoneWithDigitWrite
    284    00C0EA                  
    285    00C0EA              WriteDig2
    286    00C0EA 1F420002         mov &DisplayValue, R15  ; make a copy
    287    00C0EE 3FF0000F         and #0x0F00, R15         ; mask out all but
                                                             Dig 2
    288    00C0F2 8F10             swpb R15                    ; get the value
                                                                into LSnibble
                                                                position
    289    00C0F4                  ; use the value in R15 as an offset or index
                                into SegPatternTable
    290    00C0F4 3F5000E0         add #SegPatternTable, R15  ; R15 now points
                                                               to correct Seg
                                                               pattern to
                                                               write
    291    00C0F8 E04F273F         mov.b @R15, SEG_PORT       ; set up the
                                                               pattern to
                                                               write
    292    00C0FC F040FDFF293F     mov.b #DIG_2_N, DIG_PORT
    293    00C102 1A3C             jmp DoneWithDigitWrite
    294    00C104                  
    295    00C104              WriteDig3
    296    00C104 1F420002         mov &DisplayValue, R15  ; make a copy
    297    00C108 3FF000F0         and #0xF000, R15         ; mask out all but
                                                             Dig 3
    298    00C10C 8F10             swpb R15
    299    00C10E 0F11             rra R15                     ; get the value
                                                                into LSnibble
                                                                position
    300    00C110 0F11             rra R15
    301    00C112 0F11             rra R15
    302    00C114 0F11             rra R15    
    303    00C116                  ; use the value in R15 as an offset or index
                                into SegPatternTable
    304    00C116 3F5000E0         add #SegPatternTable, R15  ; R15 now points
                                                               to correct Seg
                                                               pattern to
                                                               write
    305    00C11A E04F053F         mov.b @R15, SEG_PORT       ; set up the
                                                               pattern to
                                                               write
    306    00C11E F040FEFF073F     mov.b #DIG_3_N, DIG_PORT
    307    00C124 093C             jmp DoneWithDigitWrite  
    308    00C126                  
    309    00C126              TestColon
    310    00C126                  ;bis.b #0xFF, DIG_PORT       ; clear out the
                                digit port
    311    00C126 1E93             cmp #0x01, R14              ; check to see
                                                                if test
                                                                register was
                                                                set
    312    00C128 0124             jeq WriteColon              ; if so then
                                                                draw colon
    313    00C12A 063C             jmp DoneWithDigitWrite      ; if not, then
                                                                finish
                                                                drawing
    314    00C12C                  
    315    00C12C              WriteColon
    316    00C12C E042F33E         mov.b #0x04, SEG_PORT       ; move to colon
                                                                port
    317    00C130 F040EFFFF53E     mov.b #DP_COM_N, DIG_PORT   ; turn on LEDs
                                                                for colon
    318    00C136 003C             jmp DoneWithDigitWrite
    319    00C138              
    320    00C138              DoneWithDigitWrite
    321    00C138 92530202         inc &CurrentDigitPos   ; set up for next
                                                           digit position for
                                                           next time
    322    00C13C              DoneWithDigitWriteTotally
    323    00C13C 3F41             pop R15     ; restore R15 before returning
    324    00C13E 3041             ret         ; return
    325    00C140              ;-----------------------------------------------
                               --------------------------------
    326    00C140              ;  end of WriteNextDigitToDisplay
    327    00C140              ;-----------------------------------------------
                               --------------------------------
    328    00C140              
    329    00C140              ;-----------------------------------------------
                               --------------------------------
    330    00C140              ;           End of all Subroutines
    331    00C140              ;-----------------------------------------------
                               --------------------------------
    332    00C140              
    333    00C140              ;-----------------------------------------------
                               --------------------------------
    334    00C140              ;          Interrupt Service Routines
    335    00C140              ;-----------------------------------------------
                               --------------------------------
    336    00C140              
    337    00C140              ;-----------------------------------------------
                               --------------------------------
    338    00C140              ; Interrupt Service Routine for Timer_A
                                0
    339    00C140              ;  Passed in: nothing
    340    00C140              ;  Activated every time TimerA_0 times
                                out
    341    00C140              ;  
    342    00C140              ;  Uses: nothing directly, but does call
                                WriteNextDigitToDisplay subroutine
    343    00C140              ;-----------------------------------------------
                               --------------------------------
    344    00C140              
    345    00C140              TA0_ISR
    346    00C140 B01282C0           call #WriteNextDigitToDisplay
    347    00C144              
    348    00C144 0013               reti    ; return from interrupt
    349    00C146              
    350    00C146              ;-----------------------------------------------
                               --------------------------------
    351    00C146              ;  end of TA0_ISR   Timer_A 0 Interrupt Service
                                Routine
    352    00C146              ;-----------------------------------------------
                               --------------------------------
    353    00C146              
    354    00C146              ;-----------------------------------------------
                               --------------------------------
    355    00C146              ;           End of all Interrupt Service
                                Routines
    356    00C146              ;-----------------------------------------------
                               --------------------------------
    357    00C146              
    358    00C146              ;-----------------------------------------------
                               --------------------------------
    359    00C146              ;           Definition of Program Data
                                Memory
    360    00C146              ;-----------------------------------------------
                               --------------------------------
    361    00E000                          ORG   0xE000   ; this line not
                                                           strictly necessary,
                                                           but does force
    362    00E000                                          ; the location of
                                this program memory data - this is
    363    00E000                                          ; a matter of
                                convenience  - need to leave enough
    364    00E000                                          ; space ahead of
                                Interrupt Vectors for the data that
    365    00E000                                          ; we are putting
                                here
    366    00E000              
    367    00E000              ; usage: use SegPatternTable as base address,
                                then offset into table for
    368    00E000              ; a specific 7-seg number (pattern) to
                                display
    369    00E000              SegPatternTable  ; contains patterns for each
                                7-seg number
    370    00E000 C0                DB  ZERO_N
    371    00E001 F9                DB  ONE_N
    372    00E002 A4                DB  TWO_N
    373    00E003 B0                DB  THREE_N
    374    00E004 99                DB  FOUR_N
    375    00E005 92                DB  FIVE_N
    376    00E006 82                DB  SIX_N
    377    00E007 F8                DB  SEVEN_N
    378    00E008 80                DB  EIGHT_N
    379    00E009 98                DB  NINE_N
    380    00E00A BF                DB  DASH_C
    381    00E00B 19                DB  FOUR_DP
    382    00E00C 79                DB  ONE_DP
    383    00E00D                   
    384    00E00D              ; usage: use DigitPatternTable as base address,
                                then offset into table for
    385    00E00D              ; a specific digit position to display
    386    00E00D              DigitPatternTable  ; contains patterns for each
                                digit position common selection
    387    00E00D F7                DB  DIG_0_N
    388    00E00E FB                DB  DIG_1_N
    389    00E00F FD                DB  DIG_2_N
    390    00E010 FE                DB  DIG_3_N
    391    00E011 EF                DB  DP_COM_N
    392    00E012              ;-----------------------------------------------
                               --------------------------------
    393    00E012              ;           Interrupt Vectors
    394    00E012              ;-----------------------------------------------
                               --------------------------------
    395    00FFF2                          ORG     0xFFF2                 
  ;TimerA_0 Vector
    396    00FFF2 40C1                     DW      TA0_ISR                
                                                     ;TimerA_0 Interrupt
                                                     Service Routine
    397    00FFF4              
    398    00FFFE                          ORG     0xFFFE                  ;
  MSP430 RESET Vector
    399    00FFFE 00C0                     DW      RESET                   ;
                                                     establishes the label
                                                     RESET as 
    400    010000                                                          ;
                                the starting point
    401    010000                          END                             ;
                                END of all code for this program



Segment             Type 	Mode
----------------------------------------
ASEG                CODE  	ABS Org:200 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
ADC10AE0            ABS    CONST UNTYP.           ASEG       4A 
ADC10CTL0           ABS    CONST UNTYP.           ASEG       1B0 
ADC10CTL1           ABS    CONST UNTYP.           ASEG       1B2 
ADC10DTC0           ABS    CONST UNTYP.           ASEG       48 
ADC10DTC1           ABS    CONST UNTYP.           ASEG       49 
ADC10MEM            ABS    CONST UNTYP.           ASEG       1B4 
ADC10SA             ABS    CONST UNTYP.           ASEG       1BC 
BCSCTL1             ABS    CONST UNTYP.           ASEG       57 
BCSCTL2             ABS    CONST UNTYP.           ASEG       58 
BCSCTL3             ABS    CONST UNTYP.           ASEG       53 
CACTL1              ABS    CONST UNTYP.           ASEG       59 
CACTL2              ABS    CONST UNTYP.           ASEG       5A 
CALBC1_12MHZ        ABS    CONST UNTYP.           ASEG       10FB 
CALBC1_16MHZ        ABS    CONST UNTYP.           ASEG       10F9 
CALBC1_1MHZ         ABS    CONST UNTYP.           ASEG       10FF 
CALBC1_8MHZ         ABS    CONST UNTYP.           ASEG       10FD 
CALDCO_12MHZ        ABS    CONST UNTYP.           ASEG       10FA 
CALDCO_16MHZ        ABS    CONST UNTYP.           ASEG       10F8 
CALDCO_1MHZ         ABS    CONST UNTYP.           ASEG       10FE 
CALDCO_8MHZ         ABS    CONST UNTYP.           ASEG       10FC 
CAPD                ABS    CONST UNTYP.           ASEG       5B 
Case_One            ABS    CONST UNTYP.           ASEG       C06E 
Case_Two            ABS    CONST UNTYP.           ASEG       C078 
Case_Zero           ABS    CONST UNTYP.           ASEG       C064 
CurrentDigitPos     ABS    CONST UNTYP.           ASEG       202 
CurrentDigitValue   ABS    CONST UNTYP.           ASEG       203 
DASH_C              ABS    CONST UNTYP.           ASEG       FFFFFFBF 
DCOCTL              ABS    CONST UNTYP.           ASEG       56 
DIG_0               ABS    CONST UNTYP.           ASEG       8 
DIG_0_N             ABS    CONST UNTYP.           ASEG       FFFFFFF7 
DIG_1               ABS    CONST UNTYP.           ASEG       4 
DIG_1_N             ABS    CONST UNTYP.           ASEG       FFFFFFFB 
DIG_2               ABS    CONST UNTYP.           ASEG       2 
DIG_2_N             ABS    CONST UNTYP.           ASEG       FFFFFFFD 
DIG_3               ABS    CONST UNTYP.           ASEG       1 
DIG_3_N             ABS    CONST UNTYP.           ASEG       FFFFFFFE 
DIG_PORT            ABS    CONST UNTYP.           ASEG       29 
DP_COM              ABS    CONST UNTYP.           ASEG       10 
DP_COM_N            ABS    CONST UNTYP.           ASEG       FFFFFFEF 
DigitPatternTable   ABS    CONST UNTYP.           ASEG       E00D 
DisplayTop          ABS    CONST UNTYP.           ASEG       C042 
DisplayValue        ABS    CONST UNTYP.           ASEG       200 
Done                ABS    CONST UNTYP.           ASEG       C04A 
DoneWithDigitWrite  ABS    CONST UNTYP.           ASEG       C138 
DoneWithDigitWriteTotallyABS    CONST UNTYP.           ASEG       C13C 
EIGHT               ABS    CONST UNTYP.           ASEG       7F 
EIGHT_N             ABS    CONST UNTYP.           ASEG       FFFFFF80 
EnableGeneralInterruptsABS    CONST UNTYP.           ASEG       C040 
FCTL1               ABS    CONST UNTYP.           ASEG       128 
FCTL2               ABS    CONST UNTYP.           ASEG       12A 
FCTL3               ABS    CONST UNTYP.           ASEG       12C 
FIVE                ABS    CONST UNTYP.           ASEG       6D 
FIVE_N              ABS    CONST UNTYP.           ASEG       FFFFFF92 
FOUR                ABS    CONST UNTYP.           ASEG       66 
FOUR_DP             ABS    CONST UNTYP.           ASEG       FFFFFF19 
FOUR_N              ABS    CONST UNTYP.           ASEG       FFFFFF99 
IE1                 ABS    CONST UNTYP.           ASEG       0 
IE2                 ABS    CONST UNTYP.           ASEG       1 
IFG1                ABS    CONST UNTYP.           ASEG       2 
IFG2                ABS    CONST UNTYP.           ASEG       3 
NINE                ABS    CONST UNTYP.           ASEG       67 
NINE_N              ABS    CONST UNTYP.           ASEG       FFFFFF98 
ONE                 ABS    CONST UNTYP.           ASEG       6 
ONE_DP              ABS    CONST UNTYP.           ASEG       FFFFFF79 
ONE_N               ABS    CONST UNTYP.           ASEG       FFFFFFF9 
P1DIR               ABS    CONST UNTYP.           ASEG       22 
P1IE                ABS    CONST UNTYP.           ASEG       25 
P1IES               ABS    CONST UNTYP.           ASEG       24 
P1IFG               ABS    CONST UNTYP.           ASEG       23 
P1IN                ABS    CONST UNTYP.           ASEG       20 
P1OUT               ABS    CONST UNTYP.           ASEG       21 
P1REN               ABS    CONST UNTYP.           ASEG       27 
P1SEL               ABS    CONST UNTYP.           ASEG       26 
P1SEL2              ABS    CONST UNTYP.           ASEG       41 
P2DIR               ABS    CONST UNTYP.           ASEG       2A 
P2IE                ABS    CONST UNTYP.           ASEG       2D 
P2IES               ABS    CONST UNTYP.           ASEG       2C 
P2IFG               ABS    CONST UNTYP.           ASEG       2B 
P2IN                ABS    CONST UNTYP.           ASEG       28 
P2OUT               ABS    CONST UNTYP.           ASEG       29 
P2REN               ABS    CONST UNTYP.           ASEG       2F 
P2SEL               ABS    CONST UNTYP.           ASEG       2E 
P2SEL2              ABS    CONST UNTYP.           ASEG       42 
P3DIR               ABS    CONST UNTYP.           ASEG       1A 
P3IN                ABS    CONST UNTYP.           ASEG       18 
P3OUT               ABS    CONST UNTYP.           ASEG       19 
P3REN               ABS    CONST UNTYP.           ASEG       10 
P3SEL               ABS    CONST UNTYP.           ASEG       1B 
P3SEL2              ABS    CONST UNTYP.           ASEG       43 
PB_0                ABS    CONST UNTYP.           ASEG       20 
PB_1                ABS    CONST UNTYP.           ASEG       40 
PB_2                ABS    CONST UNTYP.           ASEG       80 
PB_PORT             ABS    CONST UNTYP.           ASEG       28 
RESET               ABS    CONST UNTYP.           ASEG       C000 
SEG_A               ABS    CONST UNTYP.           ASEG       1 
SEG_A_N             ABS    CONST UNTYP.           ASEG       FFFFFFFE 
SEG_B               ABS    CONST UNTYP.           ASEG       2 
SEG_B_N             ABS    CONST UNTYP.           ASEG       FFFFFFFD 
SEG_C               ABS    CONST UNTYP.           ASEG       4 
SEG_C_N             ABS    CONST UNTYP.           ASEG       FFFFFFFB 
SEG_D               ABS    CONST UNTYP.           ASEG       8 
SEG_DP              ABS    CONST UNTYP.           ASEG       80 
SEG_DP_N            ABS    CONST UNTYP.           ASEG       FFFFFF7F 
SEG_D_N             ABS    CONST UNTYP.           ASEG       FFFFFFF7 
SEG_E               ABS    CONST UNTYP.           ASEG       10 
SEG_E_N             ABS    CONST UNTYP.           ASEG       FFFFFFEF 
SEG_F               ABS    CONST UNTYP.           ASEG       20 
SEG_F_N             ABS    CONST UNTYP.           ASEG       FFFFFFDF 
SEG_G               ABS    CONST UNTYP.           ASEG       40 
SEG_G_N             ABS    CONST UNTYP.           ASEG       FFFFFFBF 
SEG_PORT            ABS    CONST UNTYP.           ASEG       21 
SEVEN               ABS    CONST UNTYP.           ASEG       7 
SEVEN_N             ABS    CONST UNTYP.           ASEG       FFFFFFF8 
SIX                 ABS    CONST UNTYP.           ASEG       7D 
SIX_N               ABS    CONST UNTYP.           ASEG       FFFFFF82 
SegPatternTable     ABS    CONST UNTYP.           ASEG       E000 
SetupP1             ABS    CONST UNTYP.           ASEG       C00A 
SetupTimerA         ABS    CONST UNTYP.           ASEG       C02E 
StopWDT             ABS    CONST UNTYP.           ASEG       C004 
TA0CCR0             ABS    CONST UNTYP.           ASEG       172 
TA0CCR1             ABS    CONST UNTYP.           ASEG       174 
TA0CCR2             ABS    CONST UNTYP.           ASEG       176 
TA0CCTL0            ABS    CONST UNTYP.           ASEG       162 
TA0CCTL1            ABS    CONST UNTYP.           ASEG       164 
TA0CCTL2            ABS    CONST UNTYP.           ASEG       166 
TA0CTL              ABS    CONST UNTYP.           ASEG       160 
TA0IV               ABS    CONST UNTYP.           ASEG       12E 
TA0R                ABS    CONST UNTYP.           ASEG       170 
TA0_ISR             ABS    CONST UNTYP.           ASEG       C140 
TA1CCR0             ABS    CONST UNTYP.           ASEG       192 
TA1CCR1             ABS    CONST UNTYP.           ASEG       194 
TA1CCR2             ABS    CONST UNTYP.           ASEG       196 
TA1CCTL0            ABS    CONST UNTYP.           ASEG       182 
TA1CCTL1            ABS    CONST UNTYP.           ASEG       184 
TA1CCTL2            ABS    CONST UNTYP.           ASEG       186 
TA1CTL              ABS    CONST UNTYP.           ASEG       180 
TA1IV               ABS    CONST UNTYP.           ASEG       11E 
TA1R                ABS    CONST UNTYP.           ASEG       190 
THREE               ABS    CONST UNTYP.           ASEG       4F 
THREE_N             ABS    CONST UNTYP.           ASEG       FFFFFFB0 
TIMER_A_COUNT_1     ABS    CONST UNTYP.           ASEG       64 
TLV_ADC10_1_LEN     ABS    CONST UNTYP.           ASEG       10DB 
TLV_ADC10_1_TAG     ABS    CONST UNTYP.           ASEG       10DA 
TLV_CHECKSUM        ABS    CONST UNTYP.           ASEG       10C0 
TLV_DCO_30_LEN      ABS    CONST UNTYP.           ASEG       10F7 
TLV_DCO_30_TAG      ABS    CONST UNTYP.           ASEG       10F6 
TWO                 ABS    CONST UNTYP.           ASEG       5B 
TWO_N               ABS    CONST UNTYP.           ASEG       FFFFFFA4 
TestColon           ABS    CONST UNTYP.           ASEG       C126 
UCA0ABCTL           ABS    CONST UNTYP.           ASEG       5D 
UCA0BR0             ABS    CONST UNTYP.           ASEG       62 
UCA0BR1             ABS    CONST UNTYP.           ASEG       63 
UCA0CTL0            ABS    CONST UNTYP.           ASEG       60 
UCA0CTL1            ABS    CONST UNTYP.           ASEG       61 
UCA0IRRCTL          ABS    CONST UNTYP.           ASEG       5F 
UCA0IRTCTL          ABS    CONST UNTYP.           ASEG       5E 
UCA0MCTL            ABS    CONST UNTYP.           ASEG       64 
UCA0RXBUF           ABS    CONST UNTYP.           ASEG       66 
UCA0STAT            ABS    CONST UNTYP.           ASEG       65 
UCA0TXBUF           ABS    CONST UNTYP.           ASEG       67 
UCB0BR0             ABS    CONST UNTYP.           ASEG       6A 
UCB0BR1             ABS    CONST UNTYP.           ASEG       6B 
UCB0CTL0            ABS    CONST UNTYP.           ASEG       68 
UCB0CTL1            ABS    CONST UNTYP.           ASEG       69 
UCB0I2CIE           ABS    CONST UNTYP.           ASEG       6C 
UCB0I2COA           ABS    CONST UNTYP.           ASEG       118 
UCB0I2CSA           ABS    CONST UNTYP.           ASEG       11A 
UCB0RXBUF           ABS    CONST UNTYP.           ASEG       6E 
UCB0STAT            ABS    CONST UNTYP.           ASEG       6D 
UCB0TXBUF           ABS    CONST UNTYP.           ASEG       6F 
WDTCTL              ABS    CONST UNTYP.           ASEG       120 
WriteColon          ABS    CONST UNTYP.           ASEG       C12C 
WriteDig0           ABS    CONST UNTYP.           ASEG       C0B2 
WriteDig1           ABS    CONST UNTYP.           ASEG       C0CA 
WriteDig2           ABS    CONST UNTYP.           ASEG       C0EA 
WriteDig3           ABS    CONST UNTYP.           ASEG       C104 
WriteNextDigitToDisplayABS    CONST UNTYP.           ASEG       C082 
ZERO                ABS    CONST UNTYP.           ASEG       3F 
ZERO_N              ABS    CONST UNTYP.           ASEG       FFFFFFC0 


##############################
#          CRC:C0E4          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 352         #
##############################



