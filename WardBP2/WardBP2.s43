;-------------------------------------------------------------------------------
; ECE 3362-002 Project 2 - 4 digit 7 segment display program.
;       This program will utilize an expansion board that has a 4 digit 7-segment
;       display wired on it.  The combination 5418 will be displayed. After that
;       the user will be able to manipulate the LEDs by pressing the pushbuttons. 
;       When the user presses one of the button, the combination will change to
;       either 54--, --18, or 54.:1.8.
;       
;  Purpose: This program is designed to introduce the student into the usage 
;       of an expansion board, a 7-segment 4 digit board, use of the clock, 
;       and timer interrupts.
;
;   Target: TI LaunchPad development board with MSP430G2553 device installed
;
;       Date:           Oct 11, 2018
;       Last Revision:  1.0
;       Written by:     Bradley Ward, ECE dept, Texas Tech University
;       Adapted from:   Provided code examples; Dr. M. Helm, October 2018   
;                       DemoWith_4digitExpansionBdSimpleTimerInterrupt
;       Assembler/IDE:  IAR Embedded Workbench 6.5
;
;       HW I/O assignments:
;       P1.0    (output) Segment A (active low) drives display board
;       P1.1    (output) Segment B (active low) drives display board
;       P1.2    (output) Segment C (active low) drives display board
;       P1.3    (output) Segment D (active low) drives display board
;       P1.4    (output) Segment E (active low) drives display board
;       P1.5    (output) Segment F (active low) drives display board
;       P1.6    (output) Segment G (active low) drives display board
;       P1.7    (output) Segment DP (active low) drives display board
;
;       P2.0    (output) Digit 3 (active low) MSdigit (leftmost)
;       P2.1    (output) Digit 2 (active low)  
;       P2.2    (output) Digit 1 (active low)  
;       P2.3    (output) Digit 0 (active low) LSdigit (rightmost)
;       P2.4    (output) Other - (dots - colon)
;       P2.5    (input)  Pushbutton 0 (active low) (rightmost)
;       P2.6    (input)  Pushbutton 1 (active low) (middle)
;       P2.7    (input)  Pushbutton 2 (active low) (leftmost)
;
;
;
;*******************************************************************************
#include  "msp430g2553.h"
;-------------------------------------------------------------------------------
; Definition of Constants
;-------------------------------------------------------------------------------

; NOTE: purposely set slow to demonstrate display multiplexing
TIMER_A_COUNT_1   EQU   1    ; set count value in TimerA_0 

;definitions of segment positions 
SEG_A         EQU     %00000001 ; Port pin position P1.0
SEG_B         EQU     %00000010 ; Port pin position P1.1
SEG_C         EQU     %00000100 ; Port pin position P1.2
SEG_D         EQU     %00001000 ; Port pin position P1.3
SEG_E         EQU     %00010000 ; Port pin position P1.4
SEG_F         EQU     %00100000 ; Port pin position P1.5
SEG_G         EQU     %01000000 ; Port pin position P1.6
SEG_DP        EQU     %10000000 ; Port pin position P1.7

;since inverted pattern is needed for the display, this defines inverse pattern
SEG_A_N       EQU     ~SEG_A ; Port pin position P1.0
SEG_B_N       EQU     ~SEG_B ; Port pin position P1.1
SEG_C_N       EQU     ~SEG_C ; Port pin position P1.2
SEG_D_N       EQU     ~SEG_D ; Port pin position P1.3
SEG_E_N       EQU     ~SEG_E ; Port pin position P1.4
SEG_F_N       EQU     ~SEG_F ; Port pin position P1.5
SEG_G_N       EQU     ~SEG_G ; Port pin position P1.6
SEG_DP_N      EQU     ~SEG_DP ; Port pin position P1.7

;NOTE: display board requires INVERSE of these patterns due to Active LOW
DIG_3         EQU     %00000001 ; Port pin position P2.0 (MSdigit)
DIG_2         EQU     %00000010 ; Port pin position P2.1
DIG_1         EQU     %00000100 ; Port pin position P2.2
DIG_0         EQU     %00001000 ; Port pin position P2.3(LSdigit)
DP_COM        EQU     %00010000 ; Port pin position P2.4

;since inverted pattern is needed for the display, this defines inverse pattern
DIG_3_N       EQU     ~DIG_3 ; Port pin position P2.0 (MSdigit)
DIG_2_N       EQU     ~DIG_2 ; Port pin position P2.1
DIG_1_N       EQU     ~DIG_1 ; Port pin position P2.2
DIG_0_N       EQU     ~DIG_0 ; Port pin position P2.3(LSdigit)
DP_COM_N      EQU     ~DP_COM ; Port pin position P2.4


PB_0         EQU     %00100000 ; Port pin position P2.4
PB_1         EQU     %01000000 ; Port pin position P2.5
PB_2         EQU     %10000000 ; Port pin position P2.6


SEG_PORT         EQU     P1OUT  ; Segment Label for Port 1
DIG_PORT         EQU     P2OUT  ; Digit Label for Port 2.0-.4
PB_PORT          EQU     P2IN   ; Pushbutton Label for Port 2.5-7

;NOTE: display bd requires the INVERSE of these patterns due to Active LOW
ONE             EQU     %00000110
TWO             EQU     %01011011
THREE           EQU     %01001111
FOUR            EQU     %01100110
FIVE            EQU     %01101101
SIX             EQU     %01111101
SEVEN           EQU     %00000111
EIGHT           EQU     %01111111
NINE            EQU     %01100111
ZERO            EQU     %00111111

;since inverted pattern is needed for the display, this defines inverse pattern
ONE_N           EQU     ~%00000110
TWO_N           EQU     ~%01011011
THREE_N         EQU     ~%01001111
FOUR_N          EQU     ~%01100110
FIVE_N          EQU     ~%01101101
SIX_N           EQU     ~%01111101
SEVEN_N         EQU     ~%00000111
EIGHT_N         EQU     ~%01111111
NINE_N          EQU     ~%01100111
ZERO_N          EQU     ~%00111111
DASH_C          EQU     ~%01000000
FOUR_DP         EQU     ~%11100110
ONE_DP          EQU     ~%10000110


;-------------------------------------------------------------------------------
; Definition of Variables
;-------------------------------------------------------------------------------

            ORG   0x0200     ; beginning of RAM space (necessary statement)
            
DisplayValue  DW  0         ; contains 4 digit value to display in BCD format
                            ; BCDdig3 | BCDdig2  | BCDdig1  | BCDdig0
                            ; xxxx      xxxx       xxxx       xxxx
                            
CurrentDigitPos  DB  0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit position of current digit to write
                            
CurrentDigitValue DB 0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit value of next digit to write                           

;-------------------------------------------------------------------------------
            ORG     0xC000                  ; Program Reset (prog memory start)
                                            ; this is Program memory start 
                                            ; address for MSP430G2553 (16K)
;-------------------------------------------------------------------------------
RESET       mov.w   #0x0400,SP        ; Initialize stackpointer(to end of RAM +1)
                                     ; RAM is 512 bytes, last position is 3FFh
                                     
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT

SetupP1     mov.b   #0xFF, &P1DIR  ; all as outputs          
            mov.b   #0x1F, &P2DIR ; all but 3 MSbits as outputs   

; activate the General Purpose Digital I/O mode for P2.6 and P2.7
           bic.b   #PB_1+PB_2, &P2SEL
                                                                                        
           ; The PushButtons are wired to P2.5,6,7 (active LOW), so we need to  
           ; turn on the internal Pullup Resistors  - this is done with P2REN
           ; register
           
           ; 
           mov.b    #PB_0+PB_1+PB_2, &P2REN    ;turn on the internal resistor
           mov.b    #PB_0+PB_1+PB_2, &P2OUT    ; set the resistor to Pullup mode
           
           ; turn off all the segments and digits
           mov.b #0xFF, &SEG_PORT
           mov.b #0xFF, &DIG_PORT    
           
SetupTimerA
            mov.w   #TIMER_A_COUNT_1,&TA0CCR0 ;load a count value into the counter
            mov.w   #CCIE,&TA0CCTL0        ; enable the timer interrupt

            ;mov.w   #TASSEL_2+ID_1+MC_1,&TA0CTL   ; select SMCLK/2, up mode
            mov.w   #TASSEL_2+ID_3+MC_1,&TA0CTL   ; select SMCLK/8, up mode            
      

            
EnableGeneralInterrupts
            bis.b #GIE,SR          ; enable the general interrupts bit
            ; eint    ; this is another option to do the same thing
 
    ; start of main program   

DisplayTop     
           clr R14 ; clear the test register so colon doesn't rewrite on other
                   ; button presses
           ;put something into DisplayValue so we can write it out
           mov #0x5418, &DisplayValue
           
Done      
          ; test which button is being pressed and jump that specific case
          bit.b #PB_0, &PB_PORT
            jeq Case_Zero
          
          bit.b #PB_2, &PB_PORT
            jeq Case_One
          
          bit.b #PB_1, &PB_PORT
            jeq Case_Two
          
          jmp Done ; idle here and wait on Timer interrupts
                   ; Each timer interrupt will update next digit in display 
                   
Case_Zero 
          ; if the right button is pressed
           clr R14      ; clear test register to stop drawing colon
           mov #0xAA18, &DisplayValue ; put AA18 in to DisplayValue to be write
                                      ; out --18
           jmp Done
           
Case_One
           ; if the middle button is pressed
           mov #0x5BC8, &DisplayValue ; put 5BC8 in to DisplayValue to write
                                      ; out 54.:1.8
           mov.b #0x01, R14 ; put value in test register for drawing the colon
           jmp Done          
          
Case_Two   
           ; if the left button is pressed
           clr R14      ; clear test register to stop drawing colon
           mov #0x54AA, &DisplayValue ; put 54AA in to DisplayValue to be write
                                      ; out 54--
           jmp Done
;-------------------------------------------------------------------------------
;           End of main code
;-------------------------------------------------------------------------------                                            
                                           
;-------------------------------------------------------------------------------
;           Subroutines
;------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------
; WriteNextDigitToDisplay
;  passed in - DisplayValue, CurrentDigitPos 
;  returned - nothing
;  accomplishes - Writes next digit to the expansion bd display
;  uses: R15, global variable CurrentDigitPos, CurrentDigitValue
;-------------------------------------------------------------------------------
WriteNextDigitToDisplay
    push R15     ; save R15 since we use it here
    ; turn off all the segments and digits
    mov.b #0xFF, &SEG_PORT
    mov.b #0xFF, &DIG_PORT 
    
    cmp #0, &CurrentDigitPos
    jeq  WriteDig0
    
    cmp #1, &CurrentDigitPos
    jeq  WriteDig1
    
    cmp #2, &CurrentDigitPos
    jeq  WriteDig2
    
    cmp #3, &CurrentDigitPos
    jeq  WriteDig3
    
    cmp #4, &CurrentDigitPos
    jeq  TestColon
    
    ; invalid case - CurrentDigPos is invalid value
    clr &CurrentDigitPos   ; reset it
    jmp DoneWithDigitWriteTotally  ; get out of here
    
WriteDig0
    mov &DisplayValue, R15  ; make a copy
    and #0x000F, R15         ; mask out all but Dig 0
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_0_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig1
    mov &DisplayValue, R15  ; make a copy
    and #0x00F0, R15         ; mask out all but Dig 1
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_1_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig2
    mov &DisplayValue, R15  ; make a copy
    and #0x0F00, R15         ; mask out all but Dig 2
    swpb R15                    ; get the value into LSnibble position
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_2_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig3
    mov &DisplayValue, R15  ; make a copy
    and #0xF000, R15         ; mask out all but Dig 3
    swpb R15
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15    
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_3_N, DIG_PORT
    jmp DoneWithDigitWrite  
    
TestColon
    ;bis.b #0xFF, DIG_PORT       ; clear out the digit port
    cmp #0x01, R14              ; check to see if test register was set
    jeq WriteColon              ; if so then draw colon
    jmp DoneWithDigitWrite      ; if not, then finish drawing
    
WriteColon
    mov.b #0x04, SEG_PORT       ; move to colon port
    mov.b #DP_COM_N, DIG_PORT   ; turn on LEDs for colon
    jmp DoneWithDigitWrite

DoneWithDigitWrite
    inc &CurrentDigitPos   ; set up for next digit position for next time
DoneWithDigitWriteTotally
    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of WriteNextDigitToDisplay
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           End of all Subroutines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;          Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Service Routine for Timer_A 0
;  Passed in: nothing
;  Activated every time TimerA_0 times out
;  
;  Uses: nothing directly, but does call WriteNextDigitToDisplay subroutine
;-------------------------------------------------------------------------------

TA0_ISR
      call #WriteNextDigitToDisplay

      reti    ; return from interrupt

;-------------------------------------------------------------------------------
;  end of TA0_ISR   Timer_A 0 Interrupt Service Routine
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           End of all Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           Definition of Program Data Memory
;-------------------------------------------------------------------------------
            ORG   0xE000   ; this line not strictly necessary, but does force
                            ; the location of this program memory data - this is
                            ; a matter of convenience  - need to leave enough
                            ; space ahead of Interrupt Vectors for the data that
                            ; we are putting here

; usage: use SegPatternTable as base address, then offset into table for
; a specific 7-seg number (pattern) to display
SegPatternTable  ; contains patterns for each 7-seg number
     DB  ZERO_N
     DB  ONE_N
     DB  TWO_N
     DB  THREE_N
     DB  FOUR_N
     DB  FIVE_N
     DB  SIX_N
     DB  SEVEN_N
     DB  EIGHT_N
     DB  NINE_N
     DB  DASH_C
     DB  FOUR_DP
     DB  ONE_DP
     
; usage: use DigitPatternTable as base address, then offset into table for
; a specific digit position to display
DigitPatternTable  ; contains patterns for each digit position common selection
     DB  DIG_0_N
     DB  DIG_1_N
     DB  DIG_2_N
     DB  DIG_3_N
     DB  DP_COM_N
;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     0xFFF2                  ;TimerA_0 Vector
            DW      TA0_ISR                 ;TimerA_0 Interrupt Service Routine

            ORG     0xFFFE                  ; MSP430 RESET Vector
            DW      RESET                   ; establishes the label RESET as 
                                            ; the starting point
            END                             ; END of all code for this program
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------